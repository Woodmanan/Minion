using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Reflection;
using System.Linq;

/*
 * Mostly empty class used as a base for status effects. If you want to create a new
 * status effect, DO NOT EDIT THIS CLASS. Instead, use the template and fill in your
 * child class from there. This class mostly exists to make that process easy, and have
 * process of hooking up complicated effects be really painless.
 *
 * I have suffered so you don't have to ;_;
 */

public class EffectDisplayInfo
{
    public int imageID;
    public string subDisplayText;
}

public class Effect : ScriptableObject
{
    //AUTO: Connection count
    [HideInInspector] public const int connectionCount = 15;

    [HideInInspector] public Connections connectedTo;
    [HideInInspector] public bool ReadyToDelete = false;

    public static Dictionary<Type, int[]> connectionDict = new Dictionary<Type, int[]>();

    public virtual int priority { get { return 5; } }

    //Create UI piece
    public virtual EffectDisplayInfo GetDisplayInfo()
    {
        return null;
    }

    public virtual string GetDisplayName()
    {
        return "You must override this function, if you can see this.";
    }

    public virtual string GetDisplayDescription()
    {
        return "You must override this function, if you can see this.";
    }

    /* Connect:
     * The method that links this effect to a given monster, and hooks up its event calls.
     *
     * It's an absolute monster of a method. This is horrible and innefficient, BUT,
     * it takes roughly .01 ms to run and there's no way we need 1000 of these per
     * frame. The tradeoff for doing it this way is that new implemented effects only
     * need to override the given methods; once they do that, this function will
     * automatically connect the function to the given event, and we're good to go.
     *
     * Benchmark is ~1000 calls per second still runs at 60 FPS. This gets the greenlight.
     *
     * Adding new events to this stack is a little jank. If you think there needs to
     * be a new connection, let me (Woody) know and we can get it added!
     */
    public void Connect(Connections c)
    {
        connectedTo = c;
        
        if (!connectionDict.ContainsKey(this.GetType()))
        {
            SetupConnections();
        }

        int[] connections;
        if (!connectionDict.TryGetValue(this.GetType(), out connections))
        {
            Debug.LogError($"Effect {this.GetType().Name} was unable to find its connection list. This is bad.");
        }
        Type current = this.GetType();
        Type defaultType = typeof(Effect);

        //BEGIN AUTO CONNECT

        OnConnection();
    }

    //Extremely expensive, and terrible. On the flipside, this now only needs to happen
    //once per time the game is opened, instead of most of this work happening every frame. Win!
    public void SetupConnections()
    {
        //AUTO VARIABLE

        int[] connections = new int[numConnections];

        //This part of the code is made autonomously, and gets kind of messy.
        //This manual way of doing it sucks, but should be MUCH faster than the old way of
        //doing it. You (the coder) shouldn't need to worry about how this works, and it should
        //just behave like ~magic~. If you're curious, though, this is the gross manual way of 
        //doing this.

        MethodInfo method;

        //AUTO SETUP


        connectionDict.Add(this.GetType(), connections);
    }

    public void Disconnect()
    {
        OnDisconnection();

        int[] connections;
        if (!connectionDict.TryGetValue(this.GetType(), out connections))
        {
            Debug.LogError($"Effect {this.GetType().Name} was unable to find its connection list. This is bad.");
        }

        Connections c = connectedTo;

        //BEGIN AUTO DISCONNECT
        //END AUTO DISCONNECT

        ReadyToDelete = true;
        
    }

    public virtual void OnConnection() {}
    public virtual void OnDisconnection() {}

    //AUTO DECLARATIONS
}
